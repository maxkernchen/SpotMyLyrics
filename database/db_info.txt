


create table smlusers(userid varchar(200) primary key, email varchar(200), lastlogin datetime, lastsync datetime, loginattempts tinyint);



create table smluserlyrics(url varchar(200) primary key, songname varchar(200), artistname varchar(200), albumart varchar(200), lyrics text, lyricsfound tinyint);

        
        
create table smlplaylist(playlistid varchar(400) primary key, playlistname varchar(200), lastsynced datetime, totalsongs int, songswithlyrics int, songswithoutlyrics int, issyncing tinyint);

create table smlusersongmapping(userid varchar(50), url varchar(200), playlistid varchar(400),
index user_idx (userid), index url_idx (url), index playlist_idx (playlistid),
 FOREIGN KEY (userid)
        REFERENCES smlusers(userid)
        ON DELETE CASCADE, FOREIGN KEY (url)
        REFERENCES smluserlyrics(url)
        ON DELETE CASCADE, FOREIGN KEY (playlistid)
        REFERENCES smlplaylist(playlistid)
        ON DELETE CASCADE);


 
 CREATE PROCEDURE userexists (IN userid VARCHAR(200), OUT founduser TINYINT)
       BEGIN
         SELECT COUNT(*) INTO founduser FROM spotmylyricsdb.smlusers
         WHERE smlusers.userid = userid;
       END//


CREATE PROCEDURE emailexists (IN email VARCHAR(200), OUT foundemail TINYINT)
       BEGIN
         SELECT COUNT(*) INTO foundemail FROM spotmylyricsdb.smlusers
         WHERE smlusers.email = email;
       END//
       
       
CREATE PROCEDURE getuseridfromemail (IN email VARCHAR(200), OUT userid varchar(200))
       BEGIN
         SELECT smlusers.userid INTO userid FROM spotmylyricsdb.smlusers
         WHERE smlusers.email = email;
       END//
       
       
CREATE PROCEDURE getlyricsforuser(IN userid VARCHAR(50), IN searchterm varchar(100))
       BEGIN
         SELECT * FROM spotmylyricsdb.smluserlyrics
         JOIN spotmylyricsdb.smlusersongmapping ON smlusersongmapping.userid = userid
         AND smluserlyrics.url = smlusersongmapping.url
         WHERE LOWER(smluserlyrics.lyrics) LIKE CONCAT('%', searchterm, '%');
       END//
       
CREATE PROCEDURE getlyrics(IN userid VARCHAR(50), IN url VARCHAR(1000))
       BEGIN
         SELECT distinct artistname, songname, lyrics, albumart FROM spotmylyricsdb.smluserlyrics
         JOIN spotmylyricsdb.smlusersongmapping ON smlusersongmapping.userid = userid
         WHERE smluserlyrics.url = url;
       END//
       
CREATE PROCEDURE insertorupdatesmlplaylist(IN playlistid VARCHAR(400), IN playlistname varchar(200), IN totalsongs INT, IN issyncing tinyint)
       BEGIN
         DECLARE playlistexists TINYINT DEFAULT 0;
         DECLARE songswithoutlyrics INT DEFAULT 0;
         
         SELECT count(*) into playlistexists FROM spotmylyricsdb.smlplaylist
         WHERE smlplaylist.playlistid = playlistid;
         
         IF(playlistexists = 1) THEN
         	
         	SELECT count(*) into songswithoutlyrics FROM spotmylyricsdb.smlplaylist
         	JOIN spotmylyricsdb.smlusersongmapping ON smlplaylist.playlistid = smlusersongmapping.playlistid
         	JOIN spotmylyricsdb.smluserlyrics ON smluserlyrics.url = smlusersongmapping.url
         	WHERE smluserlyrics.lyricsfound = 0 and smlplaylist.playlistid = playlistid;
         	
         	UPDATE spotmylyricsdb.smlplaylist
         	set smlplaylist.totalsongs = totalsongs,
         	smlplaylist.songswithlyrics = totalsongs - songswithoutlyrics,
         	smlplaylist.songswithoutlyrics = songswithoutlyrics,
         	smlplaylist.lastsynced = NOW(),
         	smlplaylist.issyncing = issyncing
         	WHERE smlplaylist.playlistid = playlistid;
         ELSE
         	INSERT INTO spotmylyricsdb.smlplaylist values(playlistid, playlistname, NOW(), 
         	totalsongs, totalsongs, 0, issyncing);
         END IF;
         
       END//
       
CREATE PROCEDURE getuserplaylist(IN userid VARCHAR(50))
       BEGIN
         SELECT distinct p.* FROM spotmylyricsdb.smlplaylist p
         JOIN spotmylyricsdb.smlusersongmapping mp ON mp.userid = userid
         AND p.playlistid = mp.playlistid;
         
       END//
       
       
CREATE PROCEDURE getallusersongs(IN userid VARCHAR(50))
	BEGIN
	SELECT distinct p.playlistid, sul.* FROM spotmylyricsdb.smlplaylist p
	JOIN spotmylyricsdb.smlusersongmapping mp ON mp.userid = userid
	AND p.playlistid = mp.playlistid
	JOIN spotmylyricsdb.smluserlyrics sul ON sul.url = mp.url;

END//

CREATE PROCEDURE insertlyricsforuserplaylist(IN url varchar(200), IN songname varchar(200), IN artistname varchar(200), IN albumart varchar(200), IN lyrics text, IN lyricsfound TINYINT, IN userid varchar(50), IN playlistid varchar(400))
       BEGIN
         DECLARE songexists TINYINT DEFAULT 0;
 	 DECLARE songexistswithoutlyrics TINYINT DEFAULT 0;
	 DECLARE mappingalreadyexists TINYINT DEFAULT 0;
	 
	 START TRANSACTION;

         SELECT count(*) into songexists FROM spotmylyricsdb.smluserlyrics
         WHERE smluserlyrics.url = url;
         -- check if song exists for current user
         IF(songexists = 0) THEN
		INSERT INTO smluserlyrics (url,songname,artistname,albumart,lyrics,lyricsfound)
		VALUES(url,songname,artistname,albumart,lyrics,lyricsfound);
		
		INSERT INTO smlusersongmapping(userid,url,playlistid)
		values(userid,url,playlistid);
	   
      
         ELSE
         
         	SELECT count(*) into songexistswithoutlyrics
         	FROM spotmylyricsdb.smluserlyrics
         	WHERE smluserlyrics.url = url
         	AND smluserlyrics.lyricsfound = 0;
         	
         	IF(lyricsfound = 1 AND songexistswithoutlyrics = 1) THEN
		 	-- update the table in case we find lyrics 
			UPDATE smluserlyrics
			SET smluserlyrics.lyrics = lyrics,
			smluserlyrics.lyricsfound = lyricsfound;
		END IF;
		
		SELECT count(*) into mappingalreadyexists
         	FROM spotmylyricsdb.smluserlyrics
         	JOIN spotmylyricsdb.smlusersongmapping ON smlusersongmapping.url = 
         	url AND smlusersongmapping.userid = userid AND 
         	smlusersongmapping.playlistid = playlistid;
         	-- only insert mapping if its not already there
         	IF(mappingalreadyexists = 0) THEN
			INSERT INTO smlusersongmapping(userid,url,playlistid)
			values(userid,url,playlistid);
		END IF;
		
		
         	 
         END IF;
         
        COMMIT;

         
END //



 CREATE PROCEDURE registeruser (IN userid VARCHAR(200), IN email VARCHAR(200), OUT inserteduser TINYINT)
       BEGIN
         SELECT COUNT(*) INTO inserteduser FROM spotmylyricsdb.smlusers
         WHERE smlusers.userid = userid;
   	 START TRANSACTION;
         IF(inserteduser = 0) THEN
         	INSERT INTO smlusers (userid, email, lastlogin, lastsync, loginattempts)
         	VALUES(userid, email, NOW(), NOW(),0);
         
         END IF;
 
         COMMIT;
 END//
 
 
 
  CREATE PROCEDURE deleteplaylistforuser (IN userid VARCHAR(200), IN playlistid VARCHAR(200))
  
	BEGIN
         DECLARE songurltodelete VARCHAR(200) DEFAULT "";
 	 DECLARE finished INTEGER DEFAULT 0;

         -- cursor for songs which we are okay to delete, no other user or playlist has these stored.
         DECLARE cursorsongstodelete 
		CURSOR FOR 
			SELECT url from smluserlyrics where url not in (
				SELECT smluserlyrics.url
			 	FROM spotmylyricsdb.smluserlyrics
			 	JOIN spotmylyricsdb.smlusersongmapping ON smlusersongmapping.url = 
			 	smluserlyrics.url AND (smlusersongmapping.userid <> userid
			 	OR smlusersongmapping.playlistid <> playlistid));
	DECLARE CONTINUE HANDLER 
        FOR NOT FOUND SET finished = 1;		 	
	 
	START TRANSACTION;
	
        OPEN cursorsongstodelete;
        
        songstodeleteloop: LOOP
		FETCH cursorsongstodelete INTO songurltodelete;
		IF finished = 1 THEN 
			LEAVE songstodeleteloop;
		END IF;
		delete from smluserlyrics where url = songurltodelete;
		
		--SELECT concat('deleting song ', songurltodelete);
	END LOOP songstodeleteloop;
	
        CLOSE cursorsongstodelete;
         
        delete from smlplaylist where smlplaylist.playlistid = playlistid;
        --SELECT concat('deleting playlist ', playlistid);
        
        COMMIT;
 END//


       
       
       
    

       

